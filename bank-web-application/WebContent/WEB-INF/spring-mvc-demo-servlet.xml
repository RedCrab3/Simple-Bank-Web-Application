<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
	http://www.springframework.org/schema/beans     
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/util     
    http://www.springframework.org/schema/util/spring-util.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
    http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
    ">

	<!-- Add AspectJ Autoproxy support for aop -->
	<aop:aspectj-autoproxy />
	
	<!-- Step 3: Add support for component scanning -->
	<context:component-scan base-package="com.luv2code.springdemo" />

	<!-- Step 4: Add support for conversion, formatting and validation support -->
	<mvc:annotation-driven/>

	<!-- Step 5: Define Spring MVC view resolver -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/view/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<mvc:resources mapping="/resources/**" location="/resources/"></mvc:resources>
	
	<!-- Load customer message resources -->
	<bean id="messageSource"
	class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames" value="resources/messages" />
	</bean>
	
	<!-- Step 1: Define Database DataSource / connection pool -->
	<bean class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close" id="myDataSource">
		<property value="com.mysql.cj.jdbc.Driver" name="driverClass"/>
		<property value="jdbc:mysql://localhost:3306/bank_customer_tracker?allowPublicKeyRetrieval=true&amp;useSSL=false&amp;useUnicode=true;useJDBCCompliantTimezoneShift=true;useLegacyDatetimeCode=false;serverTimezone=Asia/Calcutta" name="jdbcUrl"/>
		<property value="BankProject" name="user"/>
		<property value="BankProject" name="password"/>
		<!-- these are connection pool properties for C3P0 -->
		<property value="5" name="initialPoolSize"/>
		<property value="5" name="minPoolSize"/>
		<property value="20" name="maxPoolSize"/>
		<property value="30000" name="maxIdleTime"/>
	</bean>
	<!-- Step 2: Setup Hibernate session factory -->
	<bean class="org.springframework.orm.hibernate5.LocalSessionFactoryBean" id="sessionFactory">
		<property name="dataSource" ref="myDataSource"/>
		<property value="com.luv2code.springdemo.entity" name="packagesToScan"/>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
			</props>
		</property>
	</bean>
	<!-- Step 3: Setup Hibernate transaction manager -->
	<bean class="org.springframework.orm.hibernate5.HibernateTransactionManager" id="myTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<!-- Step 4: Enable configuration of transactional behavior based on annotations -->
	<tx:annotation-driven transaction-manager="myTransactionManager"/>

	<!-- Add support for reading web resources: css, images, js, etc ... -->
	<mvc:resources mapping="/resources/**" location="/resources/"/>
</beans>





